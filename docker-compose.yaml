version: "2.23.0"
services:
  mysql:
    container_name: mysql
    image: mysql:latest
    restart: always
    env_file:
      - ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
    ports:
      - $MYSQL_LOCAL_PORT:$MYSQL_DOCKER_PORT
    volumes:
      - data_sql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 30s
      retries: 5

  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - data_redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 50s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
    ports:
      - $RABBITMQ_LOCAL_MANAGEMENT_PORT:$RABBITMQ_DOCKER_MANAGEMENT_PORT
      - $RABBITMQ_LOCAL_PORT:$RABBITMQ_DOCKER_PORT
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - data_rabbitmq:/var/lib/rabbitmq

  user-microservice:
    build: ./user-microservice/api
    container_name: user
    image: maven:3-openjdk-17
    volumes:
      - ./user-microservice:/user-microservice
    env_file:
      - .env
    ports:
      - "${USER_PORT}:8085"
    expose:
      - 8085
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysql:$MYSQL_DOCKER_PORT/MYSQL_DATABASE",
        "spring.datasource.username" : "$MYSQL_USER",
        "spring.datasource.password" : "$MYSQL_PASSWORD",

        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect"
        }'
      RABBITMQ_USER: RABBITMQ_USER
      RABBITMQ_PASSWORD: RABBITMQ_PASSWORD

    working_dir: /user-microservice/api
    command: sh -c "./mvnw spring-boot:run"

  payment-microservice:
    build: ./payment-microservice/api
    container_name: payment
    image: maven:3-openjdk-17
    volumes:
      - ./payment-microservice:/payment-microservice
    env_file:
      - .env
    ports:
      - "8081:8080"

    expose:
      - 8081
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url":"jdbc:mysql://mysql:$MYSQL_DOCKER_PORT/$MYSQL_DATABASE_PAYMENT",
        "spring.datasource.username":"$MYSQL_USER",
        "spring.datasource.password":"$MYSQL_PASSWORD",
        "spring.redis.host":"redis",
        "spring.redis.port":"6379",
        "spring.rabbitmq.host":"rabbitmq",
        "spring.rabbitmq.port":"$RABBITMQ_DOCKER_PORT",
        "spring.rabbitmq.username":"$RABBITMQ_USER",
        "spring.rabbitmq.password":"$RABBITMQ_PASSWORD"
        }'
    working_dir: /payment-microservice/api
    command: sh -c "./mvnw spring-boot:run"

  flight-microservice:
    build: ./flight-microservice/api
    container_name: flight
    image: maven:3-openjdk-17
    volumes:
      - ./flight-microservice:/flight-microservice
    ports:
      - $FLIGHT_LOCAL_PORT:$FLIGHT_DOCKER_PORT
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url":"jdbc:mysql://mysql:$MYSQL_DOCKER_PORT/$MYSQL_DATABASE",
        "spring.datasource.username":"$MYSQL_USER",
        "spring.datasource.password":"$MYSQL_PASSWORD",
        "spring.redis.host":"redis",
        "spring.redis.port":"6379",
        "spring.rabbitmq.host":"rabbitmq",
        "spring.rabbitmq.port":"$RABBITMQ_DOCKER_PORT",
        "spring.rabbitmq.username":"$RABBITMQ_USER",
        "spring.rabbitmq.password":"$RABBITMQ_PASSWORD"
        }'
    working_dir: /flight-microservice/api
    command: sh -c "./mvnw spring-boot:run"

  live_data_receiver-microservice:
    build: ./live-data-receiver-microservice/api
    container_name: live_data_receiver
    image: maven:3-openjdk-17
    volumes:
      - ./live-data-receiver-microservice:/live-data-receiver-microservice
    env_file:
      - .env
    ports:
      - $LIVE_DATA_RECEIVER_LOCAL_PORT:$LIVE_DATA_RECEIVER_DOCKER_PORT
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.rabbitmq.host":"rabbitmq",
        "spring.rabbitmq.port":"$RABBITMQ_DOCKER_PORT",
        "spring.rabbitmq.username":"$RABBITMQ_USER",
        "spring.rabbitmq.password":"$RABBITMQ_PASSWORD",
        "api.key":"$API_KEY"
        }'
    working_dir: /live-data-receiver-microservice/api
    command: sh -c "./mvnw spring-boot:run"

  notification-microservice:
    build: ./notification-microservice/api
    container_name: notification
    image: maven:3-openjdk-17
    volumes:
      - ./notification-microservice:/notification-microservice
    env_file:
      - .env
    ports:
      - "${NOTIFICATION_PORT}:8084"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    working_dir: /notification-microservice/api
    command: sh -c "./mvnw spring-boot:run"

  frontend:
    build:
      context: web-ui/frontend
    container_name: frontend
    ports:
      - 8083:8083
    volumes:
      - node_modules:/web-ui/frontend/node_modules
      - ./web-ui/frontend:/web-ui/frontend
    stdin_open: true
    tty: true
    env_file: .env

  display:
    build:
      context: airport-display/frontend
    container_name: display
    ports:
      - 8086:8086
    volumes:
      - airport-display-node-modules:/airport-display/frontend/node_modules
      - ./airport-display/frontend:/airport-display/frontend
    stdin_open: true
    tty: true
    env_file: .env

  nginx-proxy:
    image: nginx:latest
    container_name: proxy
    ports:
      - ${NGINX_PORT}:80
    expose:
      - 80
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - user-microservice
      - payment-microservice
      - flight-microservice
      - notification-microservice
    env_file: .env

volumes:
  node_modules:
    driver: local
  airport-display-node-modules:
    driver: local
  data_sql:
    driver: local
  data_rabbitmq:
    driver: local
  data_redis:
    driver: local
